#include <iostream>
#include <cmath>
#include <iomanip>
#include <windows.h>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <cstring>
#include <fstream>
#include <vector>
using namespace std;


int partition(int a[], int i, int j, int pivot)
{
	int l = i;
	int r = j;
	do
	{
		while (a[l] < pivot) l++;
		while (a[r] >= pivot) r--;
		if (l < r)
		{
			swap(a[r], a[i]);
		}
	} 
	while (l <= r);
	return l;
}

int findpivot(int a[], int i, int j)
{
	int firstkey = a[i];
	for (int k = i + 1; k <= j; k++)
	{
		if (a[k] > firstkey) return k;
		else if (a[k] < firstkey) return i;
		return 0;
	}
}



void quicksort(int array[], int i, int j)
{
	int pivotindex = findpivot(array, i, j);
	if (pivotindex != 0)
	{
		int pivot = array[pivotindex];
		int k = partition(array, i, j, pivot);
		quicksort(array, i, k - 1);
		quicksort(array, k, j);
	}
}


void vvod(int* array[], int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++) cin >> array[i][j];
	}
}


void vivod(int* a[], int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cout << a[i][j] << ' ';
		}
		cout << endl;
	}
}



int main()
{

	int n; cin >> n;
	int** matr = new int*[n];
	for (int i = 0; i < n; i++)
	{
		matr[i] = new int[n];
	}
	vvod(matr, n);
	vivod(matr, n);

}
