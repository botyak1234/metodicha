#include <iostream>
#include <cmath>
#include <iomanip>
#include <windows.h>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <cstring>
#include <fstream>
#include <stack>
#include <list>
#include <set>

using namespace std;


//QUICKSORT


int partition(int *a, int start, int end)
{
    // Выбираем крайний правый элемент в качестве опорного элемента массива
    int pivot = a[end];

    // элементы, меньшие точки поворота, будут перемещены вправо от `pIndex`
    // элементы больше, чем точка поворота, будут сдвинуты влево от `pIndex`
    // равные элементы могут идти в любом направлении
    int pIndex = start;

    // каждый раз, когда мы находим элемент, больший или равный опорному, `pIndex`
    // увеличивается, и этот элемент будет помещен перед опорной точкой.
    for (int i = start; i < end; i++)
    {
        if (a[i] >= pivot)
        {
            swap(a[i], a[pIndex]);
            pIndex++;
        }
    }

    // поменять местами `pIndex` с пивотом
    swap(a[pIndex], a[end]);

    // вернуть `pIndex` (индекс опорного элемента)
    return pIndex;
}

// Процедура быстрой сортировки
void quicksort(int *a, int start, int end)
{
    // базовое условие
    if (start >= end) {
        return;
    }

    // переставить элементы по оси
    int pivot = partition(a, start, end);

    // повторяем подмассив, содержащий элементы, меньшие опорной точки
    quicksort(a, start, pivot - 1);

    // повторяем подмассив, содержащий элементы, превышающие точку опоры
    quicksort(a, pivot + 1, end);
}


void sortColumns(int** matrix, int n) //вместо quicksort можно 
{                                     //использовать heapsort 
    for (int i = 0; i < n; i++)       //и ничего не изменится
    {
        int* col = new int[n];
        for (int j = 0; j < n; j++) 
        {
            col[j] = matrix[j][i];
        }
        quicksort(col, 0, n);
        for (int j = 0; j < n; j++) 
        {
            matrix[j][i] = col[j];
        }
        delete[] col;
    }
}

// функция вывода матрицы
void printMatrix(int** matrix, int n) 
{
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n; j++) 
        {
            cout << matrix[i][j];
        }
        cout << endl;
    }
}

int main() 
{
    int n;
    cout << "Enter n: ";
    cin >> n;

    int** matrix = new int* [n];
    for (int i = 0; i < n; i++) 
    {
        matrix[i] = new int[n];
        for (int j = 0; j < n; j++) 
        {
            cin >> matrix[i][j];
        }
    }

    sortColumns(matrix, n);
    printMatrix(matrix, n);

    for (int i = 0; i < n; i++) 
    {
        delete[] matrix[i];
    }
    delete[] matrix;
}

/*
4

2 4 3 6
0 7 2 1
3 3 3 3
1 6 2 1


3 7 3 6
2 6 3 3
1 4 2 1
0 3 2 1

*/




