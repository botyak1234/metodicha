#include <iostream>
#include <cmath>
#include <iomanip>
#include <windows.h>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <cstring>
#include <fstream>
#include <vector>
#include <stack>
using namespace std;

ifstream in("input.txt");
ofstream out("output.txt");


class staack
{
	struct element
	{
		int inf;
		element* next;
		element(int x, element* p) : inf(x), next(p) {}
	};
	element* head;

public:
	staack() :head(0)
	{}
	bool empty()
	{
		return head == 0;
	}
	int pop()
	{
		if (empty())
		{
			return 0;
		}
		element* r = head;
		int i = r->inf;
		head = r->next;
		delete r;
		return i;
	}
	void push(int data)
	{
		head = new element(data, head);
	}
	int top()
	{
		if (empty())
		{
			return 0;
		}
		else
		{
			return head->inf;
		}
	}
};






class list
{
	struct element
	{
		int inf;
		element* next;
		element(int x) :inf(x), next(0) {}
	};
	int count = 0;
	element* head;
	int size;
	element* findx(int x)
	{
		element* cur = head;
		for (int i = 1; i < size; i++)
		{
			if (cur->inf == x)
			{
				return cur;
			}
			cur = cur->next;
		}
	}
	element* find(int index)
	{
		if ((index < 0) || (index > size))
		{
			return nullptr;
		}
		else
		{
			element* cur = head;
			for (int i = 1; i < index; i++)
			{
				cur = cur->next;
			}
			return cur;
		}
	}
public:
	list() :head(0), size(0) {}
	bool empty()
	{
		return head == 0;
	}
	int getlength()
	{
		return size;
	}
	int getx(int x)
	{
		element* r = findx(x);
		int i = r->inf;
		return i;
	}
	int get(int index)
	{
		element* r = find(index);
		int i = r->inf;
		return i;
	}
	void insert(int index, int data)
	{
		element* newptr = new element(data);
		size = getlength() + 1;
		if (index == 1)
		{
			newptr->next = head;
			head = newptr;
		}
		else
		{
			element* prev = find(index - 1);
			newptr->next = prev->next;
			prev->next = newptr;
		}
	}
	void remove(int index)
	{
		element* cur;
		--size;
		if (index == 1)
		{
			cur = head;
			head = head->next;
		}
		else
		{
			element* prev = find(index - 1);
			cur = prev->next;
			prev->next = cur->next;
		}
		cur->next = nullptr;
		delete cur;
	}
	void print()
	{
		for (element* cur = head; cur != nullptr; cur = cur->next)
		{
			out << cur->inf << ' ';
		}
		out << endl;
	}
};











int main()
{
	list ls;
	int a;
	int c = 0;
	int value;
	in >> a;
	int* arr = new int[a];
	while (in >> value)
	{
		ls.insert(ls.getlength() + 1, value);
	}
	in.close();
	for (int i = 0; i < ls.getlength(); i++)
	{
		if (ls.get(i) == ls.get(i + 1))
		{
			arr[c] = ls.get(i);
			cout << i << ' ' << ls.get(i);
			c++;
			cout << endl;
		}
	}
	for (int i = 1; i < c; i++)
	{
		ls.remove(arr[i]);
	}
	ls.print();
	out << c;
}
