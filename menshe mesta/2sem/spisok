#include <iostream>
#include <cmath>
#include <iomanip>
#include <windows.h>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <cstring>
#include <fstream>
#include <vector>
#include <stack>
using namespace std;



class LinkedList {
    struct Node {
        int data; 
        Node* next; 
        Node(int data = 0, Node* next = nullptr) : data(data), next(next) {}
    };
    Node* head; 
public:
    LinkedList() : head(nullptr) {}
    ~LinkedList() {
        while (head) {
            Node* tmp = head;
            head = head->next;
            delete tmp;
        }
    }

   
    void add(int data) {//функция добавления элемента в конец
        head = new Node(data, head);
    }

    
    void print() const {//функция вывода списка
        for (Node* node = head; node; node = node->next) {
            cout << node->data << " ";
        }
        cout << endl;
    }

    
    int count_pairs() const {//функция подсчёта пар
        int count = 0;
        for (Node* node = head; node && node->next; node = node->next) {
            if (node->data == node->next->data) {
                ++count;
            }
        }
        return count;
    }

   
    void remove_duplicates() {//функция удаления повторяющихся элементов
        for (Node* node = head; node && node->next;) {
            if (node->data == node->next->data) {
                Node* tmp = node->next;
                node->next = tmp->next;
                delete tmp;
            }
            else {
                node = node->next;
            }
        }
    }
};



int main() {
    LinkedList list;
    list.add(3);
    list.add(2);
    list.add(2);
    list.add(1);
    list.add(1);
    list.add(1);
    list.add(0);
    list.print();

    int pairs_count = list.count_pairs();
    cout << pairs_count << endl;

    list.remove_duplicates();
    list.print();

}



/*
0 1 1 1 2 2 3
3
0 1 2 3
*/
